{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","client/js/src/boot.js","client/js/src/client.js","client/js/src/enemy.js","client/js/src/game.js","client/js/src/items.js","client/js/src/main.js","client/js/src/map.js","client/js/src/player/basePlayer.js","client/js/src/player/chatwheel.js","client/js/src/player/constants.js","client/js/src/player/demon.js","client/js/src/player/explorer.js","client/js/src/player/monk.js","client/js/src/player/movement.js","client/js/src/player/native.js","client/js/src/player/player.js","client/js/src/player/tronSoldier.js","client/js/src/player/wizard.js","client/js/src/preloader.js","client/js/src/splash.js","client/js/src/survivor.js"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1MA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvjzrvjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChfile":"bundle.js","sourceRoot":"/source/","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","'use strict';\n\nfunction Boot() {};\n\nBoot.prototype = {\n\n\tpreload: function () {\n\n\t},\n\n\tcreate: function () {\n\t\tthis.game.state.start('preloader');\n\t}\n};\n\nmodule.exports = Boot;\n","var Survivor = require('./survivor');\nvar Enemy = require('./enemy');\nfunction Client(game) {\n\tthis.game = game;\n\tthis.socket = null;\n\tthis.isActive = false;\n  this.debug = true;\n};\n\nClient.prototype = {\n\tcreate: function(){\n\t\t//connect to socket\n\t\t//this.socket = io.connect('http://localhost:8000');\n\t  \tthis.socket = io.connect('https://cryptic-springs-1537.herokuapp.com');\n\t\tvar game = this.game;\n\t\tvar socket = this.socket;\n\t\t//debug plugin\n    \t//this.game.add.plugin(Phaser.Plugin.Debug);\n\t\t//add player\n\t\tthis.game.player.create();\n\t\tthis.game.player.sprite.visible = false;\n\t\tthis.game.player.hitbox1.visible = false;\n\t\tthis.game.player.hitbox2.visible = false;\n\t\tthis.game.player.climbboxUR.visible = true;\n\t\tthis.game.player.climbboxUL.visible = true;\n\t\tthis.game.player.climbboxDL.visible = true;\n\t\tthis.game.player.climbboxDR.visible = true;\n\t\t//socket events\n\t\tthis.socket.on('playerConnected', function(data){\n\t\t\tgame.player.id = data.id;\n\t\t\t//game.survivors = [];\n\t\t});\n\t\tthis.socket.on('playerSpawn', function(data){\n    \t//console.log(data);\n\t\t\tgame.player.spawn(data.x, data.y,data.level);\n\t\t\tgame.player.sprite.visible = true;\n\t\t});\n    this.socket.on('playerRepawn', function(data){\n      //console.log(data);\n      game.player.respawn(data.x, data.y);\n      game.player.sprite.visible = true;\n      game.win = false;\n    });\n\n\t\tthis.socket.on('updatePlayers', function(data){\n\t\t\t_.each(data, function(updateSurvivor){\n\t\t\t\tif(updateSurvivor.id !== game.player.id){\n\t\t\t\t\tvar survivor = _.find(game.survivors, function(s){\n\t\t\t\t\t\treturn s.id === updateSurvivor.id;\n\t\t\t\t\t});\n\t\t\t\t\tif (!survivor) {\n\t\t\t\t\t\tvar survivor = new Survivor(updateSurvivor.id, game);\n\t\t\t\t\t\tsurvivor.create(updateSurvivor.x, updateSurvivor.y);\n\t\t\t\t\t\tgame.survivors.push(survivor);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsurvivor.sprite.x = updateSurvivor.x;\n\t\t\t\t\t\tsurvivor.sprite.y = updateSurvivor.y;\n\t\t\t\t\t\tsurvivor.sprite.status = updateSurvivor.status;\n            survivor.sprite.level = updateSurvivor.level;\n\t\t\t\t\t}\n\t\t\t\t\tsurvivor.update();\n\t\t\t\t}\n\t\t\t})\n\t\t});\n\t\tthis.socket.on('removePlayer', function(id){\n\t\t\tvar player = _.remove(game.survivors, function(player) {\n\t\t\t\treturn player.id === id;\n\t\t\t});\n\t\t\tif(player.length > 0){\n\t\t\t\tplayer[0].sprite.destroy();\n\t\t\t}\n\t\t});\n\t\t// Map\n\t\tthis.socket.on('changeLevel', function(data){\n\t\t\tgame.player.level = data.level;\n\t\t\tgame.map.update(data.map);\n\t\t\tsocket.emit('mapUpdated');\n\t\t});\n\t\tthis.socket.on('getMap', function(data,items){\n\t\t\tgame.map.create(data);\n\t\t\tgame.items.create(items);\n\t\t//\tgame.enemy.create(monster);\n\t\t\tsocket.emit('mapCreated');\n\t\t});\n\t\t// Monster Events\n\t\tthis.socket.on('updateMonsters', function(data){\n\t\t// console.log(data);\n\t\t// \tconsole.log(game.monsters);\n\t\t\tif(data.length === undefined){\n\t\t\t\tvar monster = _.find(game.monsters, function(m){\n\t\t\t\t\treturn m.id === data.id;\n\t\t\t\t});\n\t\t\t\tif(!monster){\n\t\t\t\t\tconsole.log('creating monster');\n\t\t\t\t\tvar monster = new Enemy(data.id, game);\n\t\t\t\t\tmonster.create(data);\n\t\t\t\t\tgame.monsters.push(monster);\n\t\t\t\t} else{\n\t\t\t\t//\tconsole.log(data);\n\t\t\t\t\tmonster.sprite.x = data.x;\n\t\t\t\t\tmonster.sprite.y = data.y;\n\t\t\t\t\tmonster.sprite.body.velocity.x = data.velox;\n\t\t\t\t\tmonster.sprite.body.velocity.y = data.veloy;\n\t\t\t\t\tmonster.hitpoints = data.hp;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse{\n\t\t\t\t_.each(data, function(monsterData){\n\t\t\t\t\t//console.log(monsterData);\n\t\t\t\t\tvar monster = _.find(game.monsters, function(m){\n\t\t\t\t\t\treturn m.id === monsterData.id;\n\t\t\t\t\t});\n\t\t\t\t\tif(!monster){\n\t\t\t\t\t\tconsole.log('creating monster');\n\t\t\t\t\t\tvar monster = new Enemy(monsterData.id, game);\n\t\t\t\t\t\tmonster.create(monsterData);\n\t\t\t\t\t\tgame.monsters.push(monster);\n\t\t\t\t\t} else{\n\t\t\t\t\t\tconsole.log('updating monster')\n\t\t\t\t\t\tmonster.sprite.x = monsterData.x;\n\t\t\t\t\t\tmonster.sprite.y = monsterData.y;\n\t\t\t\t\t\tmonster.sprite.body.velocity.x = monsterData.velox;\n\t\t\t\t\t\tmonster.sprite.body.velocity.y = monsterData.veloy;\n\t\t\t\t\t\tmonster.sprite.hitpoints = monsterData.hp;\n\t\t\t\t\t}\n\t\t\t\t\t//monster.update(monsterData);\n\t\t\t\t})\n\t\t\t}\n\t\t});\n\t\tthis.socket.on('removeMonster', function(id){\n\t\t\tvar monster = _.remove(game.monsters, function(m) {\n\t\t\t\treturn m.id === id;\n\t\t\t});\n\t\t\tif(monster.length > 0){\n\t\t\t\tmonster[0].sprite.destroy();\n\t\t\t}\n\t\t});\n\n\t},\n  \tloadnewMap: function(){\n\t\t//console.log(gettingLevel);\n  \t  var level = this.game.player.level;\n  \t  this.socket.emit('requestLevelChange', level);\n  \t},\n\tupdate: function(){\n\t\tif(this.game.player.isActive && this.game.player.sprite.visible){\n\t\t\tthis.socket.emit('newPlayerPosition', {\n\t\t\t\tx: this.game.player.sprite.x,\n\t\t\t\ty: this.game.player.sprite.y,\n\t\t\t\tstatus: this.game.player.status,\n\t\t\t\tlevel: this.game.player.level\n\t\t\t});\n\t\t}\n\t},\n\tupdateMonsters: function(monster){\n\t\t//console.log(monster);\n\t\tif(this.game.player.isActive && this.game.player.sprite.visible){\n\t\t\tthis.socket.emit('monsterUpdate', {\n\t\t\t\tid: monster.id,\n\t\t\t\tx: monster.x,\n\t\t\t\ty: monster.y,\n\t\t\t\tvelox: monster.body.velocity.x,\n\t\t\t\tveloy: monster.body.velocity.y,\n\t\t\t\thp: monster.hitpoints\n\t\t\t});\n\t\t}\n\t},\n\tmonsterKilled: function(monster){\n\t\t//console.log(monster);\n\t\tif(this.game.player.isActive && this.game.player.sprite.visible){\n\t\t\tthis.socket.emit('monsterKill', {\n\t\t\t\tid: monster.id\n\t\t\t});\n\t\t}\n\t},\n\tmonsterSlashed: function(monster){\n\t\tconsole.log(monster);\n\t\tif(this.game.player.isActive && this.game.player.sprite.visible){\n\n\t\t\tthis.socket.emit('monsterSlashed', {\n\t\t\t\tid: monster.id,\n\t\t\t\tx:monster.x,\n\t\t\t\ty:monster.y,\n\t\t\t\tvelox: monster.body.velocity.x,\n\t\t\t\tveloy: monster.body.velocity.y,\n\t\t\t\thp: monster.hitpoints\n\t\t\t});\n\t\t}\n\t},\n\tmonsterRequested: function(x,y){\n\t\tvar spawn = {\n\t\t\tx:x + 50,\n\t\t\ty:y - 50\n\t\t};\n\t\tthis.socket.emit('requestMonster', spawn);\n\t},\n  isInt:function(n) {\n   return n % 1 === 0;\n  }\n};\n\nmodule.exports = Client;\n","'use strict';\n\nfunction Enemy(id, game) {\n  this.game = game;\n  this.id = id;\n  this.running = null;\n  this.rng01 = null;\n  this.rng02 = null;\n};\nvar enemyBase = {\n  create: function (data) {\n    //log Data\n    // console.log(data);\n    // add every monster from server\n    this.sprite = this.game.monsterGroup.getFirstDead();\n    this.sprite = this.game.add.sprite(32,48, 'enemy2');\n    this.sprite.physicsType = Phaser.SPRITE;\n    this.sprite.animations.add('left', [0, 1, 2], 5, true);\n    this.sprite.animations.play('left');\n    this.game.physics.arcade.enable(this.sprite);\n    this.sprite.x = data.x;\n    this.sprite.id = data.id;\n    this.sprite.y = data.y;\n    this.sprite.body.velocity.x = data.velox;\n    this.sprite.body.velocity.y = data.veloy;\n    this.sprite.spawned = false;\n\n    this.sprite.body.collideWorldBounds = true;\n    this.sprite.hitpoints = data.hp;\n    this.game.monsterGroup.add(this.sprite);\n      console.log(this.sprite.spawned);\n  /*  this.rng01 = Math.random();\n    this.rng02 = Math.random();\n    this.sprite.runleft = this.game.add.tween(this.sprite);\n    this.sprite.runleft\n      .to({x:  this.sprite.x + this.rng01*450+20}, this.rng02*2000+500)\n      .to({x:  this.sprite.x }, this.rng02*2000+500)\n      .to({x:  this.sprite.x + 200}, 2000)\n      .to({x:  this.sprite.x }, 2000)\n      .loop()\n      .start(); */\n  },\n  update: function(data) {\n    console.log(data);\n  }\n};\n\nvar enemies = {};\n_.extend(enemies, enemyBase);\n\nEnemy.prototype = enemies;\n\nmodule.exports = Enemy;\n","var Items = require('./items');\nvar Player = require('./player/player');\nvar Map = require('./map');\nvar Client = require('./client');\n\nfunction Game() {\n  this.client = null;\n  this.player = null;\n  this.map = null;\n  this.enemy = null;\n  this.client = null;\n  this.win = false;\n  this.items = null;\n  this.monsterGroup = null;\n  this.monsters = [];\n  this.survivors = [];\n  this.survivorGroup = null;\n  this.monsterStun = 1000;\n  this.playerStun = 200;\n  this.invulTime = 750;\n  this.vulnTime = 1850;\n  this.monsterTimer = true;\n  this.ladders = null;\n}\n\nGame.prototype = {\n  create: function create() {\n    // enable frames manipulation & tracking\n    this.game.time.advancedTiming = true;\n\n    // enable physics\n    this.game.physics.startSystem(Phaser.Physics.ARCADE);\n    this.game.physics.arcade.OVERLAP_BIAS = 1;\n    // creating game components\n    this.player = new Player(this.game, this.map);\n    this.map = new Map(this.game,this.player, this);\n    this.items = new Items(this.game,this.map,this);\n    this.client = new Client(this);\n    this.client.create();\n  },\n  update: function update() {\n    // Request Monster Spawn\n    if(this.player.vuln){\n      this.player.sprite.tint = 0xFAA1A1;\n    }else{\n      this.player.sprite.tint = 0xffffff;\n    }\n    if(this.player.invul){\n      this.player.sprite.alpha = 0.5;\n      this.player.sprite.tint = 0xffffff;\n    }else{\n      this.player.sprite.alpha = 1;\n    }\n    if(this.player.monsterButton.isDown && this.monsterTimer){\n      this.monsterTimer = false;\n      this.game.time.events.add(1000, function(){ this.monsterTimer = true;},this);\n      console.log('requested Monster');\n      this.client.monsterRequested(this.player.sprite.x,this.player.sprite.y);\n    }\n    // show Level\n    this.game.debug.text(this.player.level || '', 2, 14, \"#ffffff\", { font: \"30px \"} );\n    // if player exists\n    // if(this.monsterGroup !== null){\n    //   console.log(this.monsters);\n    // }\n    if(this.player !== null && this.map.collisionLayer !== null){\n      // this.map.bg.tilePosition.y += 1;\n      // console.log(this.monsterGroup);\n      // make player collide\n      this.game.physics.arcade.collide(this.player.sprite,this.map.collisionLayer);\n      this.game.physics.arcade.collide(this.player.sprite,this.items.item, this.itemCollisionHandler, null, this);\n      this.game.physics.arcade.collide(this.monsterGroup,this.map.collisionLayer, this.enemyHandler, null,this);\n      this.game.physics.arcade.overlap(this.player.sprite,this.monsterGroup, this.enemyCollisionHandler, null, this);\n      this.game.physics.arcade.overlap(this.player.hitbox1,this.monsterGroup, this.enemySlashingHandler, null, this);\n      this.game.physics.arcade.overlap(this.player.hitbox2,this.monsterGroup, this.enemySlashingHandler, null, this);\n      this.game.physics.arcade.overlap(this.player.bullets,this.monsterGroup, this.enemySlashingHandler, null, this);\n      this.game.phyics.arcade.overlap(this.player.bullets,this.map.collisionLayer, this.wallHit, null, this);\n      if (this.game.physics.arcade.overlap(this.player.sprite,this.ladders)) {\n        this.player.onLadder = true;\n      } else {\n        this.player.onLadder = false;\n      }\n      this.climbCheck();\n      this.player.sprite.bringToTop();\n      this.player.hitbox1.bringToTop();\n      this.player.hitbox2.bringToTop();\n      // Update the player\n      this.player.update();\n      //update nearby Monsters\n      if (this.player.spawningLadder) {\n        this.player.spawningLadder = false;\n        if (this.player.playerClass === 0) {\n          this.ladderSpawn();\n        }\n        if (this.player.playerClass === 4) {\n          this.vineSpawn();\n        }\n      }\n    }\n    //check for windcondition\n    if (this.player.sprite.x > this.map.portal.x\n    && this.player.sprite.x < this.map.portal.x + 300\n    && this.player.sprite.y > this.map.portal.y\n    && this.player.sprite.y < this.map.portal.y + 300\n    && !this.win) {\n      //console.log('CELEBRATE');\n      this.win = true;\n      this.client.loadnewMap();\n    }\n    // if client exist\n    if(this.client !== null && this.player !== null) {\n      var bits = {\n\t\t\t\tx: this.player.sprite.x,\n\t\t\t\ty: this.player.sprite.y,\n        status: this.player.status,\n        level: this.player.level\n\t\t\t};\n      this.client.update(bits);\n    }\n  },\n  vineSpawn: function vineSpawn() {\n    var X = Math.floor((this.player.sprite.x+29)/16);\n    var Y = Math.floor((this.player.sprite.y+29)/16);\n    var maxX = this.map.maps[0].layers[0].height*16;\n    var maxY = this.map.maps[0].layers[0].width*16;\n    var alternate = 0;\n    loop:\n    for (var i = 0; i < 20; i++) {\n      if (Y-2*i-2 > 0 && X+1 < maxX\n      && this.map.collisionLayer.layer.data[Y-2*i+1][X].index === -1\n      && this.map.collisionLayer.layer.data[Y-2*i][X].index === -1\n      && this.map.collisionLayer.layer.data[Y-2*i-1][X].index === -1\n      && this.map.collisionLayer.layer.data[Y-2*i-2][X].index === -1\n      && this.map.collisionLayer.layer.data[Y-2*i+1][X+1].index === -1\n      && this.map.collisionLayer.layer.data[Y-2*i][X+1].index === -1\n      && this.map.collisionLayer.layer.data[Y-2*i-1][X+1].index === -1\n      && this.map.collisionLayer.layer.data[Y-2*i-2][X+1].index === -1) {\n        if (i === 0) {\n          if (this.map.collisionLayer.layer.data[Y-2*i+2][X].index !== -1\n          && this.map.collisionLayer.layer.data[Y-2*i+2][X+1].index !== -1) {\n            var randy = Math.random();\n            if (randy > 0.5) {\n              var ladder = this.add.sprite(32,32, 'vine_bottom_left');\n              this.addLadderPart(ladder, X, Y, -i);\n              alternate = 0;\n            } else {\n              var ladder = this.add.sprite(32,32, 'vine_bottom_right');\n              this.addLadderPart(ladder, X, Y, -i);\n              alternate = 1;\n            }\n          } else {\n            break loop;\n          }\n        } else if (alternate === 0) {\n          var ladder = this.add.sprite(32,32, 'vine_middle_right');\n          this.addLadderPart(ladder, X, Y, -i);\n          alternate = 1;\n        } else if (alternate === 1) {\n          var ladder = this.add.sprite(32,32, 'vine_middle_left');\n          this.addLadderPart(ladder, X, Y, -i);\n          alternate = 0;\n        }\n      } else if (Y-2*i > 0 && X+1 < maxX\n        && this.map.collisionLayer.layer.data[Y-2*i+1][X].index === -1\n        && this.map.collisionLayer.layer.data[Y-2*i][X].index === -1\n        && this.map.collisionLayer.layer.data[Y-2*i+1][X+1].index === -1\n        && this.map.collisionLayer.layer.data[Y-2*i][X+1].index === -1) {\n          if (i > 0) {\n            if (alternate === 0) {\n              var ladder = this.add.sprite(32,32, 'vine_top_right');\n              this.addLadderPart(ladder, X, Y, -i);\n            } else {\n              var ladder = this.add.sprite(32,32, 'vine_top_left');\n              this.addLadderPart(ladder, X, Y, -i);\n            }\n          }\n          break loop;\n      } else {\n        break loop;\n      }\n    }\n  },\n  ladderSpawn: function ladderSpawn() {\n    var X = Math.floor((this.player.sprite.x+29)/16);\n    var Y = Math.floor((this.player.sprite.y+29)/16);\n    var maxX = this.map.maps[0].layers[0].height*16;\n    var maxY = this.map.maps[0].layers[0].width*16;\n    loop:\n    for (var i = 0; i < 20; i++) {\n      if (Y+2*i+3 < maxY && X+1 < maxX\n      && this.map.collisionLayer.layer.data[Y+2*i][X].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i+1][X].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i+2][X].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i+3][X].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i][X+1].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i+1][X+1].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i+2][X+1].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i+3][X+1].index === -1) {\n        if (i === 0) {\n          if (this.player.ladderDirection === 0) {\n            var ladder = this.add.sprite(32,32, 'rope_ladder_top_left');\n            this.addLadderPart(ladder, X, Y, i);\n          } else if (this.player.ladderDirection === 2) {\n            var ladder = this.add.sprite(32,32, 'rope_ladder_top_right');\n            this.addLadderPart(ladder, X, Y, i);\n          } else if (this.player.ladderDirection === 1) {\n            var ladder = this.add.sprite(32,32, 'rope_ladder_top');\n            this.addLadderPart(ladder, X, Y, i);\n          } else {\n            break loop;\n          }\n        } else {\n          var ladder = this.add.sprite(32,32, 'rope_ladder_middle');\n          this.addLadderPart(ladder, X, Y, i);\n        }\n      } else if (Y+2*i+1 < maxY && X+1 < maxX\n      && this.map.collisionLayer.layer.data[Y+2*i][X].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i+1][X].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i][X+1].index === -1\n      && this.map.collisionLayer.layer.data[Y+2*i+1][X+1].index === -1) {\n        if (i > 0) {\n          var ladder = this.add.sprite(32,32, 'rope_ladder_bottom');\n          this.addLadderPart(ladder, X, Y, i);\n        }\n        break loop;\n      } else {\n        break loop;\n      }\n    }\n  },\n  addLadderPart: function addLadderPart(ladder, X, Y, i) {\n    ladder.physicsType = Phaser.SPRITE;\n    this.game.physics.arcade.enable(ladder);\n    ladder.visible = true;\n    ladder.body.allowGravity = false;\n    ladder.body.immovable = true;\n    //this.body.setSize();\n    ladder.x = X*16;\n    ladder.y = (Y+2*i)*16;\n    this.ladders.add(ladder);\n  },\n  climbCheck: function climbCheck() {\n    var coordsX = Math.floor((this.player.sprite.x+29)/16);\n    var coordsY = Math.floor((this.player.sprite.y+29)/16);\n    var limitX = this.map.maps[0].layers[0].height-3;\n    var limitY = this.map.maps[0].layers[0].width-3;\n    //console.log(this.map.collisionLayer.layer.data[0]);\n    //console.log('x: '+coordsX+'  y: '+coordsY+'  limitX: '+limitX+'  limitY: '+limitY);\n    if (coordsX < limitX && coordsY > 3) {\n      this.climbCheckUR(this.map.collisionLayer, coordsX, coordsY);\n    }\n    if (coordsX > 3 && coordsY > 3) {\n      this.climbCheckUL(this.map.collisionLayer, coordsX, coordsY);\n    }\n    if (coordsX > 3 && coordsY < limitY) {\n      this.climbCheckDL(this.map.collisionLayer, coordsX, coordsY);\n    }\n    if (coordsX < limitX && coordsY < limitY) {\n      this.climbCheckDR(this.map.collisionLayer, coordsX, coordsY);\n    }\n  },\n  climbCheckUR: function climbCheckUR(layer, coordsX, coordsY) {\n    this.player.climbBoxUR = false;\n    loop:\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        if (layer.layer.data[coordsY+j-2][coordsX+i+1].index !== -1) {\n          if (this.checkOverlap(this.player.climbboxUR, layer.layer.data[coordsY+j-2][coordsX+i+1])) {\n            this.player.climbBoxUR = true;\n            break loop;\n          }\n        }\n      }\n    }\n    return this.player.climbBoxUR;\n  },\n  climbCheckUL: function climbCheckUL(layer, coordsX, coordsY) {\n    this.player.climbBoxUL = false;\n    loop:\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        if (layer.layer.data[coordsY+j-2][coordsX+i-2].index !== -1) {\n          if (this.checkOverlap(this.player.climbboxUL, layer.layer.data[coordsY+j-2][coordsX+i-2])) {\n            this.player.climbBoxUL = true;\n            break loop;\n          }\n        }\n      }\n    }\n    return this.player.climbBoxUL;\n  },\n  climbCheckDL: function climbCheckDL(layer, coordsX, coordsY) {\n    this.player.climbBoxDL = false;\n    loop:\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        if (layer.layer.data[coordsY+j+1][coordsX+i-2].index !== -1) {\n          if (this.checkOverlap(this.player.climbboxDL, layer.layer.data[coordsY+j+1][coordsX+i-2])) {\n            this.player.climbBoxDL = true;\n            break loop;\n          }\n        }\n      }\n    }\n    return this.player.climbBoxDL;\n  },\n  climbCheckDR: function climbCheckDR(layer, coordsX, coordsY) {\n    this.player.climbBoxDR = false;\n    loop:\n    for (var i = 0; i < 3; i++) {\n      for (var j = 0; j < 3; j++) {\n        if (layer.layer.data[coordsY+j+1][coordsX+i+1].index !== -1) {\n          if (this.checkOverlap(this.player.climbboxDR, layer.layer.data[coordsY+j+1][coordsX+i+1])) {\n            this.player.climbBoxDR = true;\n            break loop;\n          }\n        }\n      }\n    }\n    return this.player.climbBoxDR;\n  },\n  checkOverlap: function checkOverlap(sprite, tile) {\n    var boundsA = new Phaser.Rectangle(sprite.x, sprite.y, sprite.width, sprite.height);\n    var boundsB = new Phaser.Rectangle(tile.x*16, tile.y*16, tile.width, tile.height);\n    //console.log('boundsA:'+boundsA+'  boundsB:'+boundsB);\n    return Phaser.Rectangle.intersects(boundsA, boundsB);\n  },\n  enemyCollisionHandler: function enemyCollisionHandler(playerSprite, monster) {\n    if (this.player.moveMode > 0) {\n      this.player.switchToNormal();\n    } else if (!this.player.invul && !this.player.dieing) {\n      if (!this.player.vuln) {\n        this.player.vuln = true;\n        this.player.invul = true;\n        console.log('OUCH!');\n        //console.log(this.time.events);\n        this.player.invulTimer = this.game.time.events.add(this.invulTime, function(){this.player.invul = false;}, this);\n        this.player.vulnTimer = this.game.time.events.add(this.vulnTime, function(){this.player.vuln = false;}, this);\n        //console.log(this.time.events);\n        this.player.sprite.body.velocity.x = Math.random()*1200-600;\n        this.player.sprite.body.velocity.y = -Math.random()*600;\n      } else {\n        this.player.dieing = true;\n        this.player.sprite.body.velocity.x = 0;\n        this.player.sprite.body.velocity.y = 0;\n        this.game.time.events.add(3000, this.respawnPlayer, this);\n        var death = this.player.sprite.animations.play('death');\n        this.player.status = 6;\n        death.onComplete.add(function(){\n          console.log('Respawned');\n          playerSprite.animations.frame = 26;\n        });\n        //console.log('Respawned');\n      }\n    }\n  },\n  respawnPlayer: function respawnPlayer() {\n        var X = this.map.maps[0].layers[0].height*16;\n        var Y = this.map.maps[0].layers[0].width*16;\n        var PosX = Math.floor(Math.random()*(X-32));\n        var PosY = Math.floor(Math.random()*(Y-32));\n        //console.log('Respawn '+PosX+' '+PosY);\n        this.player.sprite.x = PosX;\n        this.player.sprite.x = PosX;\n        this.player.dieing = false;\n        this.player.sprite.animations.stop();\n        this.player.sprite.animations.frame = 0;\n  },\n  enemySlashingHandler: function enemySlashingHandler(playerHitbox, monster) {\n    switch (this.player.playerClass) {\n    case 0:\n      playerHitbox.animations.play('explode');\n      //  playerHitbox.kill();\n    break;\n    case 1:\n    break;\n    case 2:\n    break;\n    case 3:\n    break;\n    case 4:\n      this.slashMonster(monster, 1, 0, 0);\n      playerHitbox.body.velocity.x = 0;\n      var explosion = playerHitbox.animations.play('explode');\n      explosion.onComplete.add(function(){\n        if (playerHitbox !== undefined) {\n          playerHitbox.kill();\n        }\n      });\n    break;\n    case 5:\n    break;\n    case 6:\n    break;\n    default:\n    break;\n    }\n  },\n  slashMonster: function slashMonster(monster, damage, knockback, knockup) {\n    if (this.player.slashing) {\n      if (monster.hitpoints > damage) {\n        monster.spawned = false;\n        monster.hitpoints = monster.hitpoints - damage;\n        if (this.player.Facing === 1 || this.player.Facing === 2 || this.player.Facing === 8) {\n          monster.body.velocity.x += knockback;//Math.random()*1200-600;\n        } else if (this.player.Facing === 4 || this.player.Facing === 5 || this.player.Facing === 6) {\n          monster.body.velocity.x -= knockback;\n        }\n        monster.body.velocity.y -= knockup;\n        this.client.monsterSlashed(monster);\n      /*  monster.runleft.pause();\n        this.game.time.events.remove(monster.stunTimer);\n        monster.stunTimer = this.game.time.events.add(this.monsterStun,function(){this.monsterReset(monster)},this); */\n      } else {\n        monster.destroy();\n        this.client.monsterKilled(monster);\n      }\n      this.player.slashing = false;\n    }\n  },\n  wallHit: function wallHit(playerHitbox, monster) {\n    if (playerHitbox !== undefined) {\n      playerHitbox.kill();\n    }\n  },\n  itemCollisionHandler: function itemCollisionHandler(playerSprite, item) {\n    item.destroy();\n    this.player.sprite.y = this.player.sprite.y - 20;\n    this.player.switchToTron();\n  },\n  enemyHandler: function enemyHandler(monster,map) {\n    //      console.log('updating position');\n    if(!monster.spawned){\n      //console.log(monster);\n      monster.spawned = true;\n      this.client.updateMonsters(monster);\n    }\n  },\n  graceReset: function graceReset() {\n    this.player.vuln = true;\n  },\n  monsterReset: function monsterReset(monster) {\n    monster.runleft = this.game.add.tween(monster);\n    this.rng01 = Math.random();\n    this.rng02 = Math.random();\n    monster.runleft\n      .to({x:monster.x + this.rng01*450+20}, this.rng02*2000+500)\n      .to({x:monster.x }, this.rng02*2000+500)\n      .loop()\n      .start();\n    //this.client.updateMonsters(monster);\n  }\n};\n\nmodule.exports = Game;\n","'use strict';\n\nfunction Items(game, map, items) {\n  this.items = items;\n  this.game = game;\n\n};\nvar itemBase = {\n  create: function (data) {\n  //  Log ITEMS\n   //console.log(data);\n  //  this.item = this.game.add.sprite(600, 600, 'item');\n  //  this.game.physics.arcade.enable(this.item);\n  //  this.item.body.collideWorldBounds = true;\n  }\n};\n\nvar item = {};\n_.extend(item, itemBase);\n\nItems.prototype = item;\n\nmodule.exports = Items;\n","var Boot = require('./boot');\nvar Preloader = require('./preloader');\nvar Splash = require('./splash');\nvar Game = require('./game');\n\nwindow.onload = function () {\n\t'use strict';\n\n  window['phaser'] = {};\n  window['phaser'].Boot = Boot;\n\twindow['phaser'].Preloader = Preloader;\n\twindow['phaser'].Splash = Splash;\n  window['phaser'].Game = Game;\n\n\n\tvar game;\n\tvar ns = window['phaser'];\n\tgame = new Phaser.Game(1024,640, Phaser.AUTO, 'phaser-game');\n\tgame.state.add('boot', ns.Boot);\n\tgame.state.add('game', ns.Game);\n\tgame.state.add('preloader', ns.Preloader);\n\tgame.state.add('splash', ns.Splash);\n\n\n\tgame.state.start('boot');\n};\n","'use strict';\n\nfunction Map(game, player, myGame) {\n\tthis.myGame = myGame;\n\tthis.player = player;\n\tthis.game = game;\n\tthis.bg = null;\n  this.maps = null;\n  this.tilemap = null;\n  this.currentMap = null;\n\tthis.tileset = null;\n\tthis.collisionLayer = null;\n  this.portal = {};\n  this.portal.x = null;\n  this.portal.y = null;\n  this.client = null;\n}\n\nvar mapBase = {\n\n\tcreate: function (data) {\n\t\t// Log Map infos\n\t\t//\tconsole.log(data + this.player.level);\n\t\tthis.game.stage.backgroundColor = '#79BFE2';\n\t\t//this.bg = this.game.add.sprite(0, 0,'bg');\n\t\tthis.bg = this.game.add.tileSprite(0, 0, 1024, 640,'bg');\n\t\tthis.bg.fixedToCamera = true;\n    this.maps = data;\n    this.setCurrentLevel(this.maps[0],'level1');\n\t\tthis.game.stage.smoothed = false;\n\t\t// add player group\n\t\tthis.myGame.monsterGroup = this.game.add.group();\n\t\tthis.myGame.survivorGroup = this.game.add.group();\n    this.myGame.ladders = this.game.add.group();\n\t//\tthis.myGame.survivorGroup.createMultiple(100,'player');\n\t},\n\tupdate: function(data) {\n\t\t//  Scroll the background\n    this.maps = data;\n    var ll = this.player.level;\n    //console.log(ll);\n    this.setCurrentLevel(this.maps[ll],'level'+ll);\n\t},\n  setCurrentLevel:function(level,name){\n\t\t//console.log(level);\n    this.currentMap = level;\n    if(this.collisionLayer !== null){\n      this.collisionLayer.destroy();\n    \tconsole.log('destroyed');\n    }\n    this.tilemap = this.game.load.tilemap(name, null, this.currentMap, Phaser.Tilemap.TILED_JSON );\n    this.tileset = this.game.add.tilemap(name);\n\t\t//set collision\n    this.tileset.setCollisionByExclusion([ 13, 14, 15, 16, 46, 47, 48, 49, 50, 51, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119]);\n    this.tileset.addTilesetImage('tiles-1');\n    //set collisionLayer\n    this.collisionLayer = this.tileset.createLayer('Tile Layer 1');\n\t\tthis.collisionLayer.renderSettings.enableScrollDelta = true;\n    this.collisionLayer.resizeWorld();\n    this.portal.x = level.portalPosX * 16;\n    this.portal.y = level.portalPosY * 16;\n    // console.log('//// PORTAL SPAWNED AT');\n    // console.log('//// x:' +  this.portal.x + 'y:'+ this.portal.y);\n    // console.log('starting game');\n\n\t\t//console.log(this.collisionLayer);\n  }\n}\n\nvar map = {};\n_.extend(map, mapBase);\n\nMap.prototype = map;\n\nmodule.exports = Map;\n","var basePlayer = {\n  create: function () {\n    // adding player sprite\n    this.sprite = this.game.add.sprite(32, this.game.world.height - 150, 'explorer');\n    this.hitbox1 = this.game.add.sprite(32, this.game.world.height - 150, 'monk_hitbox');\n    this.hitbox2 = this.game.add.sprite(32, this.game.world.height - 150, 'monk_hitbox');\n    this.climbboxUR = this.game.add.sprite(32, this.game.world.height - 150, 'climbbox');\n    this.climbboxUL = this.game.add.sprite(32, this.game.world.height - 150, 'climbbox');\n    this.climbboxDL = this.game.add.sprite(32, this.game.world.height - 150, 'climbbox');\n    this.climbboxDR = this.game.add.sprite(32, this.game.world.height - 150, 'climbbox');\n    // adding physics\n    this.game.physics.arcade.enable(this.sprite);\n    this.game.physics.arcade.enable(this.hitbox1);\n    this.game.physics.arcade.enable(this.hitbox2);\n    this.game.physics.arcade.enable(this.climbboxUR);\n    this.game.physics.arcade.enable(this.climbboxUL);\n    this.game.physics.arcade.enable(this.climbboxDL);\n    this.game.physics.arcade.enable(this.climbboxDR);\n    this.hitbox1.body.allowGravity = false;\n    this.hitbox2.body.allowGravity = false;\n    this.climbboxUR.body.allowGravity = false;\n    this.climbboxUL.body.allowGravity = false;\n    this.climbboxDL.body.allowGravity = false;\n    this.climbboxDR.body.allowGravity = false;\n    // clip size\n    this.sprite.body.setSize(29, 29, 29, 29);\n    // adding animations\n    this.sprite.animations.add('right', [2,3,4], 10, true);\n    this.sprite.animations.add('left', [12,13,14], 10, true);\n    this.sprite.animations.add('death', [20,21,22,23,24,25,26,27], 10, false);\n    this.sprite.animations.add('climb_ladder', [30,31,32,30,33,34], 10, true);\n\n    this.sprite.animations.add('monk_slash_rightup', [46,45,47,48,49,46,51,50], 12, true);\n    this.sprite.animations.add('monk_slash_leftup', [56,55,57,58,59,56,41,40], 12, true);\n    this.sprite.animations.add('monk_slash_leftdown', [50,51,50,44,43,42,40,41], 12, true);\n    this.sprite.animations.add('monk_slash_rightdown', [40,41,50,51,40,41,50,51], 12, true);\n\n    this.sprite.animations.add('monk_slash_right', [40,41,50,51,40,41,50,51], 12, true);\n    this.sprite.animations.add('monk_slash_up', [44,45,44,43,53,54,53,52], 12, true);\n    this.sprite.animations.add('monk_slash_left', [50,51,50,44,43,42,40,41], 12, true);\n    this.sprite.animations.add('monk_slash_down', [50,41,60,51,50,41,50,51], 12, true);\n\n    this.sprite.animations.add('explorer_slash_right', [40,41,42,43,44,45,46,47], 12, true);\n    this.sprite.animations.add('explorer_slash_left', [50,51,52,53,54,55,56,57], 12, true);\n\n    this.sprite.animations.add('demon_slash_right', [40,41,42,43,44], 12, true);\n    this.sprite.animations.add('demon_slash_left', [50,51,52,53,54], 12, true);\n\n    this.sprite.animations.add('climb_right_wall', [60,61,62,63], 12, true);\n    this.sprite.animations.add('climb_left_wall', [70,71,72,73], 12, true);\n\n    this.sprite.animations.add('climb_right_overhang', [64,65,66], 12, true);\n    this.sprite.animations.add('climb_left_overhang', [74,75,76], 12, true);\n\n    // this.hitbox2.animations.add('monk_slash_rightup', [0,1,2,3,4], 50, true);\n    // this.hitbox2.animations.add('monk_slash_leftup',  [0,1,2,3,4], 50, true);\n    // this.hitbox2.animations.add('monk_slash_leftdown',  [0,1,2,3,4], 50, true);\n    // this.hitbox2.animations.add('monk_slash_rightdown', [0,1,2,3,4], 50, true);\n    //\n    // this.hitbox2.animations.add('monk_slash_right', [1,2,3,4,5], 50, true);\n    // this.hitbox2.animations.add('monk_slash_up',  [1,2,3,4,5], 50, true);\n    // this.hitbox2.animations.add('monk_slash_left',  [1,2,3,4,5], 50, true);\n    // this.hitbox2.animations.add('monk_slash_down', [1,2,3,4,5], 50, true);\n\n    // adding gravity and Player Velocity\n    this.game.physics.arcade.gravity.y = this.gravity;\n    this.sprite.body.maxVelocity.y = 500;\n\n    this.sprite.body.collideWorldBounds = true;\n    // make the camera follow the player\n    this.game.camera.follow(this.sprite,Phaser.FOLLOW_PLATFORMER);\n    this.cursors = this.game.input.keyboard.createCursorKeys();\n    this.monsterButton = this.game.input.keyboard.addKey(Phaser.Keyboard.M);\n    this.jumpButton = this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);\n    this.greetBtn = this.game.input.keyboard.addKey(Phaser.Keyboard.H);\n    this.teleport = this.game.input.keyboard.addKey(Phaser.Keyboard.T);\n    this.fullscreen = this.game.input.keyboard.addKey(Phaser.Keyboard.F);\n    this.tron = this.game.input.keyboard.addKey(Phaser.Keyboard.R);\n    this.slash = this.game.input.keyboard.addKey(Phaser.Keyboard.S);\n    this.class0 = this.game.input.keyboard.addKey(Phaser.Keyboard.ZERO);\n    this.class1 = this.game.input.keyboard.addKey(Phaser.Keyboard.ONE);\n    this.class2 = this.game.input.keyboard.addKey(Phaser.Keyboard.TWO);\n    this.class3 = this.game.input.keyboard.addKey(Phaser.Keyboard.THREE);\n    this.class4 = this.game.input.keyboard.addKey(Phaser.Keyboard.FOUR);\n    this.class5 = this.game.input.keyboard.addKey(Phaser.Keyboard.FIVE);\n    this.ladderButton = this.game.input.keyboard.addKey(Phaser.Keyboard.L);\n    this.specialButton = this.game.input.keyboard.addKey(Phaser.Keyboard.E);\n    this.game.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;\n\n    // Set Fullscreen\n    this.fullscreen.onDown.add(this.gofull, this);\n\n    //set explorer class.\n    this.setPlayerClass(0);\n   },\n  update: function() {\n    // populate bit Array TEST\n  },\n  gofull: function () {\n    // toggle fullscreen\n    if (this.game.scale.isFullScreen){\n      this.game.scale.stopFullScreen();\n    } else {\n      this.game.scale.startFullScreen(false);\n    }\n  },\n  respawn: function(x, y) {\n    this.alive = true;\n    this.sprite.x = 0;//x;\n    this.sprite.y = 0//y;\n  },\n  spawn: function(x, y,level) {\n    this.alive = true;\n    this.sprite.x = x;\n    this.sprite.y = y;\n    this.level = level;\n  }\n};\n\nmodule.exports = basePlayer;\n","'use strict';\n\nvar chatWheel = {\n\n}\n\nmodule.exports = chatWheel;\n\n","var Constants = {\n    teleport: {\n      cd: 15000,\n      rangeX: 320,\n      rangeY: 160\n    }\n};\n\nmodule.exports = Constants;\n","var Demon = {\n  playerClass: 5,\n  moveMode: 0,\n  slashTime: 312,\n  classInit: function () {\n    this.sprite.loadTexture('demon', 0);\n  },\n  classUpdate: function classUpdate() {\n    switch (this.moveMode) {\n      case 0:\n        //add some attacks for demon!\n        //Attacking\n        //Slash\n        this.slashingDirection();\n        if (this.slash.isDown) {\n          if (!this.slashed) {\n            this.slashat();\n            this.slashed = true;\n          }\n        } else {\n          this.slashed = false;\n        }\n      break;\n      default: \n        this.moveMode = 0;\n      break;\n    }\n  },\n  slashat: function slashat() {\n    if (this.Facing === 1 || this.Facing === 2 || this.Facing === 3 || this.Facing === 8) {\n      this.sprite.animations.play('demon_slash_right');\n    } else if (this.Facing === 4 || this.Facing === 5 || this.Facing === 6 || this.Facing === 7) {\n      this.sprite.animations.play('demon_slash_left');\n    }\n    this.hitbox1.visible = true;\n    this.hitbox2.visible = true;\n    this.slashing = true;\n    this.game.time.events.remove(this.slashTimer);\n    this.slashTimer = this.game.time.events.add(this.slashTime,function(){this.hitbox1.visible = false;this.hitbox2.visible = false;this.slashing = false;},this);\n  },\n  slashingDirection: function slashingDirection() {\n    this.hitbox2.x = this.sprite.x + 29;\n    this.hitbox2.y = this.sprite.y + 29;\n    if (this.Facing === 1 || this.Facing === 2 || this.Facing === 3 || this.Facing === 8) {\n      //right\n      this.hitbox1.x = this.sprite.x + 58;\n      this.hitbox1.y = this.sprite.y + 29;\n    } else if (this.Facing === 4 || this.Facing === 5 || this.Facing === 6 || this.Facing === 7) {\n      //left\n      this.hitbox1.x = this.sprite.x;\n      this.hitbox1.y = this.sprite.y + 29;\n    } \n  }\n};\n\nmodule.exports = Demon;","var Explorer = {\n  playerClass: 0,\n  moveMode: 0,\n  slashTime: 500,\n  classInit: function () {\n    this.sprite.loadTexture('explorer', 0);\n  },\n  classUpdate: function classUpdate() {\n    switch (this.moveMode) {\n      case 0:\n        this.climbingMask();\n        if (this.slash.isDown) {\n          if (this.climbBoxUR || this.climbBoxUL) {\n            this.switchToClimb();\n          }\n        }\n        this.slashingDirection();\n        if (this.slash.isDown) { \n          if (this.sprite.body.blocked.down) {\n            if (!this.slashed) {\n              this.slashat();\n              this.slashed = true;\n            }\n          }\n        } else {\n          this.slashed = false;\n        }\n      break;\n      case 2:\n        this.climbingMask();\n        //Reverting to Normal Movement\n        if (!this.slash.isDown || (!this.climbBoxUR && !this.climbBoxUL && !this.climbBoxDL && !this.climbBoxDR)) {\n          this.switchToNormal();\n        }\n        this.directions();\n        this.climb();\n        //spawning a ladder\n        if (this.specialButton.isDown) {\n          if (!this.ladderOnCD) {\n            this.spawningLadder = true;\n            this.ladderOnCD = true;\n            this.game.time.events.add(this.ladderCD,function(){this.ladderOnCD = false;},this);\n          }\n        }\n      break;\n      case 3:\n      break;\n      default:\n        this.moveMode = 0;\n      break;\n    }\n  },\n  slashat: function slashat() {\n    if (this.Facing === 1 || this.Facing === 2 || this.Facing === 3 || this.Facing === 8) {\n      this.sprite.animations.play('explorer_slash_right');\n    } else if (this.Facing === 4 || this.Facing === 5 || this.Facing === 6 || this.Facing === 7) {\n      this.sprite.animations.play('explorer_slash_left');\n    }\n    this.hitbox1.visible = true;\n    this.hitbox2.visible = true;\n    this.slashing = true;\n    this.game.time.events.remove(this.slashTimer);\n    this.slashTimer = this.game.time.events.add(this.slashTime,function(){this.hitbox1.visible = false;this.hitbox2.visible = false;this.slashing = false;},this);\n  },\n  slashingDirection: function slashingDirection() {\n    this.hitbox2.x = this.sprite.x + 29;\n    this.hitbox2.y = this.sprite.y + 29;\n    if (this.Facing === 1 || this.Facing === 2 || this.Facing === 3 || this.Facing === 8) {\n      //right\n      this.hitbox1.x = this.sprite.x + 49;\n      this.hitbox1.y = this.sprite.y + 29;\n    } else if (this.Facing === 4 || this.Facing === 5 || this.Facing === 6 || this.Facing === 7) {\n      //left\n      this.hitbox1.x = this.sprite.x + 9;\n      this.hitbox1.y = this.sprite.y + 29;\n    } \n  },\n  climbingMask: function climbingMask() {\n    this.climbboxUR.x = this.sprite.x+44;\n    this.climbboxUR.y = this.sprite.y+25;\n    this.climbboxUL.x = this.sprite.x+25;\n    this.climbboxUL.y = this.sprite.y+25;\n    this.climbboxDL.x = this.sprite.x+25;\n    this.climbboxDL.y = this.sprite.y+44;\n    this.climbboxDR.x = this.sprite.x+44;\n    this.climbboxDR.y = this.sprite.y+44;\n  },\n  switchToClimb: function switchToClimb() {\n    this.moveMode = 2;\n    this.sprite.body.velocity.x = 0;\n    this.sprite.body.velocity.y = 0;\n    this.sprite.body.acceleration.x = 0;\n    this.sprite.body.acceleration.y = 0;\n    this.sprite.body.allowGravity = false;\n  },\n  climb: function climb() {\n    var climbspeed = 125;\n    var overhangspeed = 85;\n    var shimmyspeed = 175;\n    var shaftspeed = 275;\n    //Shaft\n    if (this.climbBoxUR && this.climbBoxUL && this.climbBoxDL && this.climbBoxDR) {\n      this.climbing(shaftspeed, shaftspeed, shaftspeed);\n      this.climbingAnimation(0, this.H, this.V);\n      this.ladderDirection = 1;\n    } else {\n    //Corner Right\n      if (this.climbBoxUR && this.climbBoxUL && this.climbBoxDR) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(1, this.H, this.V);\n        this.ladderDirection = 2;\n    //Corner Left\n      } else if (this.climbBoxUR && this.climbBoxUL && this.climbBoxDL) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(1, this.H, this.V);\n        this.ladderDirection = 0;\n    //Overhang\n      } else if (this.climbBoxUR && this.climbBoxUL) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(1, this.H, this.V);\n        this.ladderDirection = 1;\n    //Wall to the Right\n      } else if (this.climbBoxUR && this.climbBoxDR) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(2, this.H, this.V);\n        this.ladderDirection = 2;\n    //Wall to the Left\n      } else if (this.climbBoxUL && this.climbBoxDL) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(3, this.H, this.V);\n        this.ladderDirection = 0;\n    //Overhang End Right\n      } else if (this.climbBoxUL) {\n        this.climbing(overhangspeed, climbspeed, overhangspeed);\n        this.climbingAnimation(4, this.H, this.V);\n        this.ladderDirection = 3;\n    //Overhang End Left\n      } else if (this.climbBoxUR) {\n        this.climbing(overhangspeed, climbspeed, overhangspeed);\n        this.climbingAnimation(5, this.H, this.V);\n        this.ladderDirection = 3;\n    //Wall Top Right\n      } else if (this.climbBoxDR) {\n        this.climbing(overhangspeed, climbspeed, overhangspeed);\n        this.climbingAnimation(2, this.H, this.V);\n        this.ladderDirection = 2;\n    //Wall Top Left\n      } else if (this.climbBoxDL) {\n        this.climbing(overhangspeed, climbspeed, overhangspeed);\n        this.climbingAnimation(3, this.H, this.V);\n        this.ladderDirection = 0;\n      }\n    }\n  },\n  climbing: function climbing(sidespeed, upspeed, downspeed) {\n    if (this.direction === 8 || this.direction === 1 || this.direction === 2 ) {\n      // moving right\n      this.sprite.body.velocity.x = sidespeed;\n      this.H = 1;\n    } else if (this.direction === 4 || this.direction === 5 || this.direction === 6 ) {\n      // moving left\n      this.sprite.body.velocity.x = -sidespeed;\n      this.H = -1;\n    } else {\n      // resting\n      this.sprite.body.velocity.x = 0;\n      this.H = 0;\n    }\n    if (this.direction === 2 || this.direction === 3 || this.direction === 4 ) {\n      // moving up\n      this.sprite.body.velocity.y = -upspeed;\n      this.V = -1;\n    } else if (this.direction === 6 || this.direction === 7 || this.direction === 8 ) {\n      // moving down\n      this.sprite.body.velocity.y = downspeed;\n      this.V = 1;\n    } else {\n      // resting\n      this.sprite.body.velocity.y = 0;\n      this.V = 0;\n    }\n  },\n  climbingAnimation: function climbingAnimation(N, H, V) {\n    //Animation Shaft\n    if (N === 0) {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      //Climb to the Right\n      } else if (H === 1) {\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      //Climb to the Left\n      } else if (H === -1) {\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      //Hang\n      } else {\n        this.sprite.frame = 30;\n        this.status = 10;\n      }\n    //Animation Overhang\n    } else if (N === 1) {\n      //Climb to the Right\n      if (H === 1) {\n        this.sprite.animations.play('climb_right_overhang');\n        this.status = 25;\n      //Climb to the Left\n      } else if (H === -1) {\n        this.sprite.animations.play('climb_left_overhang');\n        this.status = 24;\n      //Hang\n      } else {\n        this.sprite.frame = 66;\n        this.status = 28;\n      }\n    //Animation Wall Right\n    } else if (N === 2) {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_right_wall');\n        this.status = 21;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_right_wall');\n        this.status = 21;\n      //Hang\n      } else {\n        this.sprite.frame = 61;\n        this.status = 25;\n      }\n    //Animation Wall Left\n    } else if (N === 3) {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_left_wall');\n        this.status = 20;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_left_wall');\n        this.status = 20;\n      //Hang\n      } else {\n        this.sprite.animations.stop();\n        this.sprite.frame = 71;\n        this.status = 24;\n      }\n    //Animation Overhang End Right\n    } else if (N === 4) {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_left_wall');\n        this.status = 20;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_left_wall');\n        this.status = 20;\n      //Hang\n      } else {\n        this.sprite.animations.stop();\n        this.sprite.frame = 74;\n        this.status = 26;\n      }\n    //Animation Overhang End Left\n    } else {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_right_wall');\n        this.status = 21;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_right_wall');\n        this.status = 21;\n      //Hang\n      } else {\n        this.sprite.animations.stop();\n        this.sprite.frame = 64;\n        this.status = 27;\n      }\n    }\n  }\n};\n\nmodule.exports = Explorer;\n","var Monk = {\n  playerClass: 1,\n  moveMode: 0,\n  slashTime: 500,\n  classInit: function () {\n    this.sprite.loadTexture('monk', 0);\n  },\n  classUpdate: function classUpdate() {\n\t  //Attacking\n    //Slash\n    this.slashingDirection();\n    if (this.slash.isDown) {\n      if (!this.slashed) {\n        this.slashat();\n        this.slashed = true;\n      }\n    } else {\n      this.slashed = false;\n    }\n    switch (this.moveMode) {\n    case 0:\n    //Gliding\n      this.glideCond();\n      if (this.jumpButton.isDown) {\n        this.glidy();\n      }\n    break;\n\n    case 3:\n    break;\n\n    default:\n      this.moveMode = 0;\n    break;\n    }\n  },\n  glide: function glide(N) {\n    switch (N) {\n      case 0:\n      if (this.gliding) {\n        this.sprite.body.acceleration.y = 0;\n        this.sprite.body.maxVelocity.y = 500;\n        this.sprite.body.allowGravity = true;\n        this.gliding = false;\n      }\n      break;\n      case 1:\n      if (!this.gliding) {\n        this.gliding = true;\n        this.sprite.body.maxVelocity.y = 80;\n        this.sprite.animations.stop();\n        if (this.sprite.body.velocity.x > 0) {\n          this.sprite.frame = 1;\n        } else {\n          this.sprite.frame = 11;\n        }\n      }\n      break;\n      case 2:\n      if (!this.gliding) {\n        this.gliding = true;\n        this.sprite.body.allowGravity = false;\n        this.sprite.body.acceleration.y = -500;\n        this.sprite.animations.stop();\n        if (this.sprite.body.velocity.x > 0) {\n          this.sprite.frame = 5;\n        } else {\n          this.sprite.frame = 15;\n        }\n      }\n      break;\n    }\n  },\n  glidy: function glidy() {\n    if ( !((this.sprite.body.onFloor() && !this.bunnyKiller) || this.jumpWindow)\n    && !(this.wallJumpL && this.jumpRelease && this.cursors.right.isDown)\n    && !(this.wallJumpR && this.jumpRelease && this.cursors.left.isDown) ) {\n      if (this.sprite.body.velocity.y > 0\n      && this.sprite.body.velocity.y < 400 && this.jumpRelease) {\n        this.glide(1);\n      } else if (this.sprite.body.velocity.y > 400 && this.jumpRelease) {\n        this.glide(2);\n      }\n    }\n  },\n  glideCond: function glideCond() {\n    if (this.sprite.body.blocked.up || this.sprite.body.blocked.down || !this.jumpButton.isDown) {\n        this.glide(0);\n    }\n  },\n  slashat: function slashat() {\n    if (this.Facing === 1) {\n      this.sprite.animations.play('monk_slash_right');\n    } else if (this.Facing === 2) {\n      this.sprite.animations.play('monk_slash_rightup');\n    } else if (this.Facing == 3) {\n      this.sprite.animations.play('monk_slash_up');\n    } else if (this.Facing === 4) {\n      this.sprite.animations.play('monk_slash_leftup');\n    } else if (this.Facing === 5) {\n      this.sprite.animations.play('monk_slash_left');\n    } else if (this.Facing === 6) {\n      this.sprite.animations.play('monk_slash_leftdown');\n    } else if (this.Facing === 7) {\n      this.sprite.animations.play('monk_down');\n    } else if (this.Facing === 8) {\n      this.sprite.animations.play('monk_slash_rightdown');\n    }\n    this.hitbox1.visible = true;\n    this.hitbox2.visible = true;\n    this.slashing = true;\n    this.game.time.events.remove(this.slashTimer);\n    this.slashTimer = this.game.time.events.add(this.slashTime,function(){this.hitbox1.visible = false;this.hitbox2.visible = false;this.slashing = false;},this);\n  },\n  slashingDirection: function slashingDirection() {\n    if (this.Facing === 1 || this.Facing === 5) {\n      //left and right\n      this.hitbox1.x = this.sprite.x + 58;\n      this.hitbox1.y = this.sprite.y + 29;\n      this.hitbox2.x = this.sprite.x;\n      this.hitbox2.y = this.sprite.y + 29;\n      //up\n    } else if (this.Facing == 3) {\n      this.hitbox1.x = this.sprite.x + 14;\n      this.hitbox1.y = this.sprite.y;\n      this.hitbox2.x = this.sprite.x + 44;\n      this.hitbox2.y = this.sprite.y;\n      //down\n    } else if (this.Facing == 7) {\n      this.hitbox1.x = this.sprite.x + 58;\n      this.hitbox1.y = this.sprite.y + 29;\n      this.hitbox2.x = this.sprite.x;\n      this.hitbox2.y = this.sprite.y + 29;\n      //upright and downleft\n    } else if (this.Facing === 2 || this.Facing === 6) {\n      this.hitbox1.x = this.sprite.x + 58;\n      this.hitbox1.y = this.sprite.y;\n      this.hitbox2.x = this.sprite.x;\n      this.hitbox2.y = this.sprite.y + 29;\n      //upleft and downright\n    } else if (this.Facing === 4 || this.Facing === 8) {\n      this.hitbox1.x = this.sprite.x + 58;\n      this.hitbox1.y = this.sprite.y + 29;\n      this.hitbox2.x = this.sprite.x;\n      this.hitbox2.y = this.sprite.y;\n    } /* else {\n      this.hitbox.x = this.sprite.x - 1;\n      this.hitbox.y = this.sprite.y - 3;\n    } */\n  }\n};\n\nmodule.exports = Monk;\n","var Explorer = require('./explorer');\nvar Monk = require('./monk');\nvar TronSoldier = require('./tronSoldier');\nvar Wizard = require('./wizard');\nvar Native = require('./native');\nvar Demon = require('./demon');\n\nvar movement = {\n  update: function update() {\n    // this.game.debug.spriteInfo(this.sprite, 32, 620);\n    this.isActive = true;\n    if (!this.dieing) {\n      //Switching Class\n      //Character Classes: Explorer = 0, Monk = 1, Tron Soldier = 2, Wizard = 3, (Big Brawn = 4, Dark = 5)\n      if (this.getNewPlayerClass() !== -1 && this.getNewPlayerClass !== this.playerClass) {\n        this.setPlayerClass(this.getNewPlayerClass());\n      }\n      //Basic Movement\n      if (this.moveMode === 0) {\n        //Running\n        this.directions();\n        this.basicRunning();\n        //Jumping\n        this.jumpCond();\n        if (this.jumpButton.isDown) {\n          this.jumpy();\n        }\n        if (this.cursors.up.isDown && this.onLadder) {\n          this.switchToLadder();\n          this.game.time.events.add(150,function(){this.mountingLadder = true;},this);\n          if (this.sprite.body.blocked.down) {\n            this.sprite.y -= 1;\n            this.mountingLadder = false;\n          }\n        }\n      }\n      if (this.moveMode === 3) {\n        if (this.jumpButton.isDown || !this.onLadder || this.sprite.body.blocked.down) {\n          this.switchToNormal();\n        }\n        this.directions();\n        this.climbLadder();\n      }\n      //Class Movement\n      this.classUpdate();\n    }\n  },\n  getNewPlayerClass: function getNewPlayerClass() {\n    if (this.class0.isDown && this.playerClass !== 0) {\n      return 0;\n    }\n    if (this.class1.isDown && this.playerClass !== 1) {\n      return 1;\n    }\n    if (this.class2.isDown && this.playerClass !== 2) {\n      return 2;\n    }\n    if (this.class3.isDown && this.playerClass !== 3) {\n      return 3;\n    }\n    if (this.class4.isDown && this.playerClass !== 4) {\n      return 4;\n    }\n    if (this.class5.isDown && this.playerClass !== 5) {\n      return 5;\n    }\n    return -1;\n  },\n  setPlayerClass: function setPlayerClass (classId) {\n    switch (classId) {\n      case 0:\n        _.extend(this, Explorer);\n        this.status = 100;\n        break;\n      case 1:\n        _.extend(this, Monk);\n        this.status = 101;\n        break;\n      case 2:\n        _.extend(this, TronSoldier);\n        this.status = 102;\n        break;\n      case 3:\n        _.extend(this, Wizard);\n        this.status = 103;\n      break;\n      case 4:\n        _.extend(this, Native);\n        this.status = 104;\n      break;\n      case 5:\n        _.extend(this, Demon);\n        this.status = 105;\n      break;\n    }\n\n    this.classInit();\n  },\n  classUpdate: function classUpdate() {\n    // placeholder to be overwritten.\n  },\n  directions: function directions() {\n    //Looking UP/RIGHT\n    if (this.cursors.right.isDown && this.cursors.up.isDown) {\n      this.direction = 2;\n    //Looking UP/LEFT\n    } else if (this.cursors.left.isDown && this.cursors.up.isDown) {\n      this.direction = 4;\n    //Looking DOWN/LEFT\n    } else if (this.cursors.left.isDown && this.cursors.down.isDown) {\n      this.direction = 6;\n    //Looking DOWN/RIGHT\n    } else if (this.cursors.right.isDown && this.cursors.down.isDown) {\n      this.direction = 8;\n    //Looking RIGHT\n    } else if (this.cursors.right.isDown) {\n      this.direction = 1;\n    //Looking UP\n    } else if (this.cursors.up.isDown) {\n      this.direction = 3;\n    //Looking LEFT\n    } else if (this.cursors.left.isDown) {\n      this.direction = 5;\n    //Looking DOWN\n    } else if (this.cursors.down.isDown) {\n      this.direction = 7;\n    //Idle\n    } else {\n      this.direction = 0;\n    }\n    if (this.direction != 0 && !this.slashing) {\n      this.Facing = this.direction;\n    }\n  },\n  basicRunning: function basicRunning() {\n    // populate bit Array TEST\n    if (this.cursors.left.isDown && this.cursors.right.isDown) {\n      this.sprite.body.acceleration.x = 0;\n    //Looking UP/RIGHT\n    } else if (this.direction === 2) {\n      this.moveLR(1, this.sprite);\n    //Looking UP/LEFT\n    } else if (this.direction === 4) {\n      this.moveLR(-1, this.sprite);\n    //Looking DOWN/LEFT\n    } else if (this.direction === 6) {\n      this.moveLR(-1, this.sprite);\n    //Looking DOWN/RIGHT\n    } else if (this.direction === 8) {\n      this.moveLR(1, this.sprite);\n    //Looking RIGHT\n    } else if (this.direction === 1) {\n      this.moveLR(1, this.sprite);\n    //Looking UP\n    } else if (this.direction === 3) {\n      this.decelerate(this.sign(this.sprite.body.velocity.x));\n    //Looking LEFT\n    } else if (this.direction === 5) {\n      this.moveLR(-1, this.sprite);\n    //Looking DOWN\n    } else if (this.direction === 7) {\n      this.decelerate(this.sign(this.sprite.body.velocity.x));\n    //Deceleration and Standing Still\n    } else {\n      this.decelerate(this.sign(this.sprite.body.velocity.x));\n    }\n  },\n  decelerate: function decelerate(sign) {\n    var body = this.sprite.body;\n    //Sliding Friction\n    if(body.onFloor() && (sign*body.velocity.x > this.groundCutoff)) {\n       body.acceleration.x = -sign*this.groundFriction;\n    }\n    //Air Resistance\n     else if (!body.onFloor() && sign*body.velocity.x > this.airCutoff) {\n      body.acceleration.x = -sign*this.airFriction;\n    }\n    //Stopping\n    else {\n      body.velocity.x = 0;\n      body.acceleration.x = 0;\n    }\n    //Animation Standing\n    if (body.onFloor && !this.slashing && !this.gliding && !this.dieing) {\n      this.sprite.animations.stop();\n      this.sprite.frame = 0;\n      this.status = 0;\n    }\n  },\n  jumpCond: function jumpCond() {\n    if (this.sprite.body.blocked.up) {\n      this.jumpWindow = false;\n      this.jumpSpeedBonus = 0;\n      this.wallWindow = false;\n    }\n    if (!this.jumpButton.isDown) {\n      this.jumpRelease = true;\n      if (this.jumpStop) {\n        this.jumpStop = false;\n        if (this.sprite.body.velocity.y < 0) {\n          this.sprite.body.velocity.y = 0;\n        }\n      }\n      if (this.jumpWindow) {\n        this.jumpWindow = false;\n        this.jumpSpeedBonus = 0;\n      }\n      if (this.sprite.body.onFloor()) {\n        this.bunnyKiller = false;\n      }\n    }\n    if (this.sprite.body.blocked.left && !this.wallJumpL && !this.jumpButton.isDown) {\n      this.wallJumpL = true;\n      this.game.time.events.remove(this.wallWindow);\n      this.wallWindow = this.game.time.events.add(this.wallJumpTime,function(){this.wallJumpL = false;this.wallJumpR = false;},this);\n    } else if (this.sprite.body.blocked.right && !this.wallJumpR && !this.jumpButton.isDown) {\n      this.wallJumpR = true;\n      this.game.time.events.remove(this.wallWindow);\n      this.wallWindow = this.game.time.events.add(this.wallJumpTime,function(){this.wallJumpL = false;this.wallJumpR = false;},this);\n    }\n  },\n  jumpy: function jumpy() {\n    if ((this.sprite.body.onFloor() && !this.bunnyKiller) || this.jumpWindow) {\n      this.jump();\n    } else if (this.wallJumpL && this.jumpRelease && this.cursors.right.isDown) {\n      this.jump();\n      this.wallJumpL = false;\n      this.wallJumpR = false;\n      this.sprite.body.velocity.x = this.wallJumpBoost;\n    } else if (this.wallJumpR && this.jumpRelease && this.cursors.left.isDown) {\n      this.jump();\n      this.wallJumpL = false;\n      this.wallJumpR = false;\n      this.sprite.body.velocity.x = -this.wallJumpBoost;\n    }\n  },\n  jump: function jump() {\n    this.bunnyKiller = true;\n    this.jumpRelease = false;\n    this.jumpStop = true;\n    if (this.sprite.body.onFloor()) {\n      this.jumpSpeedBonus = (Math.abs(this.sprite.body.velocity.x))/this.jumpSpeedCoeff;\n      this.jumpWindow = true;\n      this.game.time.events.remove(this.jumpWindowTimer);\n      this.jumpWindowTimer = this.game.time.events.add(this.jumpAirtime,function(){this.jumpWindow = false;this.jumpSpeedBonus = 0;},this);\n    }\n    else if (this.wallJumpL) {\n      this.jumpWindow = true;\n      this.jumpSpeedBonus = this.wallJumpBonus;\n      this.game.time.events.remove(this.jumpWindowTimer);\n      this.jumpWindowTimer = this.game.time.events.add(this.jumpAirtime,function(){this.jumpWindow = false;this.jumpSpeedBonus = 0;},this);\n    }\n    else if (this.wallJumpR) {\n      this.jumpWindow = true;\n      this.jumpSpeedBonus = this.wallJumpBonus;\n      this.game.time.events.remove(this.jumpWindowTimer);\n      this.jumpWindowTimer = this.game.time.events.add(this.jumpAirtime,function(){this.jumpWindow = false;this.jumpSpeedBonus = 0;},this);\n    }\n    this.sprite.body.velocity.y = -this.jumpSpeedBase-this.jumpSpeedBonus;\n    //Animation Jumping\n    if (!this.slashing && !this.gliding) {\n      this.sprite.animations.stop();\n      if ( this.sprite.body.velocity.x < -1) {\n        this.sprite.frame = 11;\n        this.status = 4;\n      } else if ( this.sprite.body.velocity.x > 1) {\n        this.sprite.frame = 1;\n        this.status = 5;\n      } else {\n        this.sprite.frame = 0;\n        this.status = 0;\n      }\n    }\n  },\n  moveLR: function moveLR(sign){\n    var body = this.sprite.body;\n    //Braking\n    if (sign*body.velocity.x < 0) {\n      if (body.onFloor()) {\n        body.acceleration.x = sign*this.braking;\n      } else {\n        body.acceleration.x = sign*Math.max(this.airbraking,sign*this.airbrakeHigh*body.velocity.x);\n      }\n    //Starting\n    } else if (body.onFloor && sign*body.velocity.x < this.boostWindow) {\n      body.velocity.x = sign*this.boost;\n    //Cruising\n    } else {\n      if (body.onFloor()) {\n        body.acceleration.x = sign*this.runnig;\n      } else if (sign*body.velocity.x < this.floatWindow) {\n        body.acceleration.x = sign*this.floating;\n      } else {\n        body.acceleration.x = 0;\n      }\n    }\n    //Animation\n    if (body.onFloor() && !this.slashing && !this.gliding && !this.dieing) {\n      if (sign === -1) {\n        this.sprite.animations.play('left');\n        this.status = 2;\n      } else {\n        this.sprite.animations.play('right');\n        this.status = 3;\n      }\n    } else if (!body.onFloor() && !this.slashing && !this.gliding && !this.dieing) {\n      if (sign === -1) {\n        this.sprite.frame = 11;\n        this.status = 4;\n      } else {\n        this.sprite.frame = 1;\n        this.status = 5;\n      }\n    }\n  },\n  //Simple sign function. \"sign\" is also the parameter for multiple functions here. do not be confused though.\n  sign: function sign(x){\n    if(x < 0){\n      return -1;\n    } else {\n      return 1;\n    }\n  },\n  switchToNormal: function switchToNormal() {\n    this.moveMode = 0;\n    this.sprite.body.maxVelocity.y = 500;\n    this.sprite.body.allowGravity = true;\n    this.tronWindow = true;\n    this.mountingLadder = false;\n    this.game.time.events.add(500,function(){this.tronWindow = false;},this);\n  },\n  switchToLadder: function switchToLadder() {\n    this.moveMode = 3;\n    this.sprite.body.velocity.x = 0;\n    this.sprite.body.velocity.y = 0;\n    this.sprite.body.acceleration.x = 0;\n    this.sprite.body.acceleration.y = 0;\n    this.sprite.body.allowGravity = false;\n  },\n  climbLadder: function climbLadder() {\n    var upspeed = 150;\n    var downspeed = 150;\n    var sidespeed = 75;\n    if (!this.mountingLadder) {\n      this.sprite.body.velocity.y = 0;\n      if (!this.cursors.up.isDown) {\n        this.mountingLadder = true;\n      }\n    }\n    if (this.mountingLadder) {\n      if (this.direction === 2 || this.direction === 3 || this.direction === 4 ) {\n        // moving up\n        this.sprite.body.velocity.y = -upspeed;\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      } else if (this.direction === 6 || this.direction === 7 || this.direction === 8 ) {\n        // moving down\n        this.sprite.body.velocity.y = downspeed;\n        this.sprite.animations.play('climb_ladder');\n        this.status = 7;\n      } else {\n        // resting\n        this.sprite.body.velocity.y = 0;\n      }\n    }\n    if (this.mountingLadder) {\n      if (this.direction === 8 || this.direction === 1 || this.direction === 2 ) {\n        // moving right\n        this.sprite.body.velocity.x = sidespeed;\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      } else if (this.direction === 4 || this.direction === 5 || this.direction === 6 ) {\n        // moving left\n        this.sprite.body.velocity.x = -sidespeed;\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      } else {\n        // resting\n        this.sprite.body.velocity.x = 0;\n      }\n    }\n    if (this.sprite.body.velocity.x === 0 && this.sprite.body.velocity.y === 0) {\n      this.sprite.animations.stop();\n      this.sprite.frame = 30;\n      this.status = 10;\n    }\n  }\n};\nmodule.exports = movement;\n","var Native = {\n  playerClass: 4,\n  moveMode: 0,\n  slashTime: 1600,\n  classInit: function () {\n    this.sprite.loadTexture('native', 0);\n    this.bullets = this.game.add.group();\n    this.game.physics.enable(this.bullets, Phaser.Physics.ARCADE);\n  },\n  classUpdate: function classUpdate() {\n    switch (this.moveMode) {\n      case 0:\n        this.climbingMask();\n        if (this.slash.isDown) {\n          if (this.climbBoxUR || this.climbBoxUL) {\n            this.switchToClimb();\n          }\n        }\n        //attacking\n        if (this.slash.isDown) {\n          if (this.sprite.body.blocked.down) {\n            if (!this.slashed) {\n              this.shoot();\n              this.slashed = true;\n            }\n          }\n        }\n        if (this.specialButton.isDown) {\n          if (!this.ladderOnCD) {\n            this.spawningLadder = true;\n            this.ladderOnCD = true;\n            this.game.time.events.add(this.ladderCD,function(){this.ladderOnCD = false;},this);\n          }\n        }\n      break;\n      case 2:\n        this.climbingMask();\n        //Reverting to Normal Movement\n        if (!this.slash.isDown || (!this.climbBoxUR && !this.climbBoxUL && !this.climbBoxDL && !this.climbBoxDR)) {\n          this.switchToNormal();\n        }\n        this.directions();\n        this.climb();\n        //spawning a ladder\n        if (this.ladderButton.isDown) {\n          if (!this.ladderOnCD) {\n            this.ladderSpawn = true;\n            this.ladderOnCD = true;\n            this.game.time.events.add(this.ladderCD,function(){this.ladderOnCD = false;},this);\n          }\n        }\n      break;\n      case 3:\n      break;\n      default:\n        this.moveMode = 0;\n      break;\n    }\n  },\n  shoot:function shoot(){\n    this.slashing = true;\n    this.slashed = true;\n    //this.game.time.events.remove(this.slashTimer);\n    this.bullet = this.bullets.create(this.sprite.body.x + this.sprite.body.width / 2 + 20, this.sprite.body.y + this.sprite.body.height / 2 - 4, 'arrow');\n    this.game.physics.enable(this.bullet, Phaser.Physics.ARCADE);\n    this.bullet.outOfBoundsKill = true;\n    this.bullet.anchor.setTo(0.5, 0.5);\n    this.bullet.body.allowGravity = false;\n    this.bullet.body.velocity.y = 0;\n    if (this.Facing === 1 || this.Facing === 2 || this.Facing === 8) {\n      this.bullet.body.velocity.x = 400;\n    } else if (this.Facing === 4 || this.Facing === 5 || this.Facing === 6) {\n      this.bullet.body.velocity.x = -400;\n    }\n    this.bullet.animations.add('explode', [1,2,3,4,5], 10, false);\n    this.slashTimer = this.game.time.events.add(this.slashTime,function(){\n      this.slashing = false;\n      this.slashed = false;\n      if (this.bullet !== undefined) {\n        this.bullet.kill();\n      }\n    },this);\n  },\n  climbingMask: function climbingMask() {\n    this.climbboxUR.x = this.sprite.x+44;\n    this.climbboxUR.y = this.sprite.y+25;\n    this.climbboxUL.x = this.sprite.x+25;\n    this.climbboxUL.y = this.sprite.y+25;\n    this.climbboxDL.x = this.sprite.x+25;\n    this.climbboxDL.y = this.sprite.y+44;\n    this.climbboxDR.x = this.sprite.x+44;\n    this.climbboxDR.y = this.sprite.y+44;\n  },\n  switchToClimb: function switchToClimb() {\n    console.log('Switched to Climb');\n    this.moveMode = 2;\n    this.sprite.body.velocity.x = 0;\n    this.sprite.body.velocity.y = 0;\n    this.sprite.body.acceleration.x = 0;\n    this.sprite.body.acceleration.y = 0;\n    this.sprite.body.allowGravity = false;\n  },\n  climb: function climb() {\n    var climbspeed = 125;\n    var overhangspeed = 85;\n    var shimmyspeed = 175;\n    var shaftspeed = 275;\n    //Shaft\n    if (this.climbBoxUR && this.climbBoxUL && this.climbBoxDL && this.climbBoxDR) {\n      this.climbing(shaftspeed, shaftspeed, shaftspeed);\n      this.climbingAnimation(0, this.H, this.V);\n    } else {\n    //Corner Right\n      if (this.climbBoxUR && this.climbBoxUL && this.climbBoxDR) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(1, this.H, this.V);\n    //Corner Left\n      } else if (this.climbBoxUR && this.climbBoxUL && this.climbBoxDL) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(1, this.H, this.V);\n    //Overhang\n      } else if (this.climbBoxUR && this.climbBoxUL) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(1, this.H, this.V);\n    //Wall to the Right\n      } else if (this.climbBoxUR && this.climbBoxDR) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(2, this.H, this.V);\n    //Wall to the Left\n      } else if (this.climbBoxUL && this.climbBoxDL) {\n        this.climbing(overhangspeed, climbspeed, shimmyspeed);\n        this.climbingAnimation(3, this.H, this.V);\n    //Overhang End Right\n      } else if (this.climbBoxUL) {\n        this.climbing(overhangspeed, climbspeed, overhangspeed);\n        this.climbingAnimation(4, this.H, this.V);\n    //Overhang End Left\n      } else if (this.climbBoxUR) {\n        this.climbing(overhangspeed, climbspeed, overhangspeed);\n        this.climbingAnimation(5, this.H, this.V);\n    //Wall Top Right\n      } else if (this.climbBoxDR) {\n        this.climbing(overhangspeed, climbspeed, overhangspeed);\n        this.climbingAnimation(2, this.H, this.V);\n    //Wall Top Left\n      } else if (this.climbBoxDL) {\n        this.climbing(overhangspeed, climbspeed, overhangspeed);\n        this.climbingAnimation(3, this.H, this.V);\n      }\n    }\n  },\n  climbing: function climbing(sidespeed, upspeed, downspeed) {\n    if (this.direction === 8 || this.direction === 1 || this.direction === 2 ) {\n      // moving right\n      this.sprite.body.velocity.x = sidespeed;\n      this.H = 1;\n    } else if (this.direction === 4 || this.direction === 5 || this.direction === 6 ) {\n      // moving left\n      this.sprite.body.velocity.x = -sidespeed;\n      this.H = -1;\n    } else {\n      // resting\n      this.sprite.body.velocity.x = 0;\n      this.H = 0;\n    }\n    if (this.direction === 2 || this.direction === 3 || this.direction === 4 ) {\n      // moving up\n      this.sprite.body.velocity.y = -upspeed;\n      this.V = -1;\n    } else if (this.direction === 6 || this.direction === 7 || this.direction === 8 ) {\n      // moving down\n      this.sprite.body.velocity.y = downspeed;\n      this.V = 1;\n    } else {\n      // resting\n      this.sprite.body.velocity.y = 0;\n      this.V = 0;\n    }\n  },\n   climbingAnimation: function climbingAnimation(N, H, V) {\n    //Animation Shaft\n    if (N === 0) {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      //Climb to the Right\n      } else if (H === 1) {\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      //Climb to the Left\n      } else if (H === -1) {\n        this.sprite.animations.play('climb_ladder');\n        this.status = 9;\n      //Hang\n      } else {\n        this.sprite.frame = 30;\n        this.status = 10;\n      }\n    //Animation Overhang\n    } else if (N === 1) {\n      //Climb to the Right\n      if (H === 1) {\n        this.sprite.animations.play('climb_right_overhang');\n        this.status = 25;\n      //Climb to the Left\n      } else if (H === -1) {\n        this.sprite.animations.play('climb_left_overhang');\n        this.status = 24;\n      //Hang\n      } else {\n        this.sprite.frame = 66;\n        this.status = 28;\n      }\n    //Animation Wall Right\n    } else if (N === 2) {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_right_wall');\n        this.status = 21;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_right_wall');\n        this.status = 21;\n      //Hang\n      } else {\n        this.sprite.frame = 61;\n        this.status = 25;\n      }\n    //Animation Wall Left\n    } else if (N === 3) {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_left_wall');\n        this.status = 20;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_left_wall');\n        this.status = 20;\n      //Hang\n      } else {\n        this.sprite.animations.stop();\n        this.sprite.frame = 71;\n        this.status = 24;\n      }\n    //Animation Overhang End Right\n    } else if (N === 4) {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_left_wall');\n        this.status = 20;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_left_wall');\n        this.status = 20;\n      //Hang\n      } else {\n        this.sprite.animations.stop();\n        this.sprite.frame = 74;\n        this.status = 26;\n      }\n    //Animation Overhang End Left\n    } else {\n      //Climb Down\n      if (V === 1) {\n        this.sprite.animations.play('climb_right_wall');\n        this.status = 21;\n      //Climb Up\n      } else if (V === -1) {\n        this.sprite.animations.play('climb_right_wall');\n        this.status = 21;\n      //Hang\n      } else {\n        this.sprite.animations.stop();\n        this.sprite.frame = 64;\n        this.status = 27;\n      }\n    }\n  }\n};\n\nmodule.exports = Native;\n","var constants = require('./constants');\nvar basePlayer = require('./basePlayer');\nvar movement = require('./movement');\nvar chatWheel = require('./chatwheel');\n\n'use strict';\n\nfunction Player(game,map) {\n  this.map = map;\n    this.game = game;\n    // input\n    this.cursors = null;\n    //player\n    this.sprite = null;\n    this.hitbox1 = null;\n    this.hitbox2 = null;\n    this.climbboxUR = null;\n    this.climbboxUL = null;\n    this.climbboxDL = null;\n    this.climbboxDR = null;\n    this.status = null;\n    this.level = null;\n    this.shotTimer = 0;\n    this.bullet = null;\n    this.bullets = null;\n    // this.playerAction = null;\n    // this.playerMovement = null;\n    // this.chatWheel = null;\n    this.alive = false;\n    this.jumpButton = null;\n    this.jumpStop = false;\n    this.jumpWindow = false;\n    this.bunnyKiller = false;\n    this.greetBtn = null;\n    this.jumpRelease = false;\n    this.doubleJumpCondition = false;\n    this.greeting = null;\n    this.wallJumpL = false;\n    this.wallJumpR = false;\n    this.wallWindow = false;\n    this.tron = null;\n    this.tronWindow = false;\n    this.teleport = null;\n    this.blocks = null;\n    this.climbBoxUR = false;\n    this.climbBoxUL = false;\n    this.climbBoxDL = false;\n    this.climbBoxDR = false;\n    this.teleportcd = false;\n    this.direction = 1;\n    this.Facing = 0;\n    this.slash = null;\n    this.slashed = false;\n    this.slashing = false;\n    this.slashTimer = null;\n    this.dieing = false;\n    this.vuln = false;\n    this.invul = false;\n    this.vulnTime = 1850;\n    this.invultime = 750;\n    this.slashTime = 500;\n    this.ladderDirection = 1;\n    this.ladderCD = 5000;\n    this.ladderOnCD = false;\n    this.onLadder = false;\n    this.mountingLadder = false;\n    this.spawningLadder = false;\n    this.H = 0;\n    this.V = 0;\n    this.gliding = false;\n    this.playerClass = 0;\n\n    this.jumpWindowTimer = null;\n    this.phasebooties = null;\n\n    this.jumpSpeedBonus = 0;\n    this.moveMode = 0;\n    //All the Balance\n    //General Map Data\n    this.mapSizex = 640;\n    this.tileSizex = 16;\n    this.gravity = 750;\n    //Teleport\n    this.teleportCd = 15000;\n    this.teleportRangeX = 320;\n    this.teleportRangeY = 160;\n    //Deceleration\n    this.groundFriction = 950;\n    this.airFriction = 0;\n    this.groundCutoff = 200;\n    this.airCutoff = 5;\n    //Running\n    this.braking = 1950;\n    this.airbraking = 950;\n    this.airbrakeHigh = 2;\n    this.runnig = 250;\n    this.boost = 150;\n    this.boostWindow = 100;\n    this.floating = 500;\n    this.floatWindow = 250;\n    //Jumping\n    this.jumpSpeedBase = 250;\n    this.jumpSpeedCoeff = 7;\n    this.jumpAirtime = 500;\n    this.wallJumpTime = 150;\n    this.wallJumpBoost = 350;\n    this.wallJumpBonus = 50;\n    // Tron\n    this.tronspeed = 700;\n    this.tronleft = false;\n    this.tronright = false;\n    this.tronup = false;\n    this.trondown = false;\n    this.tronCd = 5000;\n    this.tronCool = true;\n}\n\nvar player = {};\n\n_.extend(player, basePlayer);\n_.extend(player, chatWheel);\n_.extend(player, movement);\n\nPlayer.prototype = player;\n\nmodule.exports = Player;\n","var TronSoldier = {\n  playerClass: 2,\n  moveMode: 0,\n  classInit: function () {\n    this.sprite.loadTexture('tron', 0);\n  },\n  classUpdate: function classUpdate() {\n  \tswitch (this.moveMode) {\n  \tcase 0:\n  \t  //Switching to Tronmove\n\t    if (this.tron.isDown) {\n\t      if (!this.tronWindow && this.tronCool) {\n\t        this.switchToTron();\n\t      }\n\t    }\n    break;\n\n    case 1:\n      //Tronmove\n      //Reverting to Normal Movement\n      if (this.tron.isDown  || this.sprite.body.blocked.up\n                            || this.sprite.body.blocked.down\n                            || this.sprite.body.blocked.left\n                            || this.sprite.body.blocked.right) {\n        if (!this.tronWindow) {\n          this.switchToNormal();\n        }\n      }\n      //Tronmoving\n      this.tronMove();\n    break;\n\n    case 3:\n    break;\n\n    default:\n      this.moveMode = 0;\n    break;\n    }\n  },\n  switchToTron: function switchToTron() {\n    this.sprite.y = this.sprite.y - 16;\n    this.moveMode = 1;\n    this.sprite.body.velocity.x = 0;\n    this.sprite.body.velocity.y = 0;\n    this.sprite.body.acceleration.x = 0;\n    this.sprite.body.acceleration.y = 0;\n    this.sprite.body.allowGravity = false;\n    this.sprite.body.maxVelocity.y = this.tronspeed;\n    this.tronWindow = true;\n    this.tronCool = false;\n    this.game.time.events.add(500,function(){this.tronWindow = false;},this);\n    this.game.time.events.add(this.tronCd,function(){this.tronCool = true;},this);\n    this.tronleft = false;\n    this.tronright = false;\n    this.tronup = false;\n    this.trondown = false;\n  },\n  tronMove: function tronMove() {\n    //LEFT\n    if (this.cursors.left.isDown && !this.tronleft) {\n      if (!this.cursors.up.isDown && !this.cursors.down.isDown) {\n        this.tronMoveL();\n      }\n    }\n    //RIGHT\n    else if (this.cursors.right.isDown && !this.tronright) {\n      if (!this.cursors.up.isDown && !this.cursors.down.isDown) {\n        this.tronMoveR();\n      }\n    }\n    //UP\n    else if (this.cursors.up.isDown && !this.tronup) {\n      if (!this.cursors.left.isDown && !this.cursors.right.isDown) {\n        this.tronMoveU();\n      }\n    }\n    //DOWN\n    else if (this.cursors.down.isDown && !this.trondown) {\n      if (!this.cursors.left.isDown && !this.cursors.right.isDown) {\n        this.tronMoveD();\n      }\n    }\n  },\n  tronMoveL: function tronMoveL() {\n    this.sprite.frame = 33;\n    this.status = 44;\n    this.sprite.body.velocity.x = -this.tronspeed;\n    this.sprite.body.velocity.y = 0;\n    this.sprite.body.acceleration.x = 0;\n    this.sprite.body.acceleration.y = 0;\n    this.tronleft = true;\n    this.tronright = false;\n    this.tronup = false;\n    this.trondown = false;\n  },\n  tronMoveR: function tronMoveR() {\n    this.sprite.frame = 31;\n    this.status = 45;\n    this.sprite.body.velocity.x = this.tronspeed;\n    this.sprite.body.velocity.y = 0;\n    this.sprite.body.acceleration.x = 0;\n    this.sprite.body.acceleration.y = 0;\n    this.tronleft = false;\n    this.tronright = true;\n    this.tronup = false;\n    this.trondown = false;\n  },\n  tronMoveU: function tronMoveU() {\n    this.sprite.frame = 32;\n    this.status = 46;\n    this.sprite.body.velocity.y = -this.tronspeed;\n    this.sprite.body.velocity.x = 0;\n    this.sprite.body.acceleration.x = 0;\n    this.sprite.body.acceleration.y = 0;\n    this.tronleft = false;\n    this.tronright = false;\n    this.tronup = true;\n    this.trondown = false;\n  },\n  tronMoveD: function tronMoveD() {\n    this.sprite.frame = 30;\n    this.status = 47;\n    this.sprite.body.velocity.y = this.tronspeed;\n    this.sprite.body.velocity.x = 0;\n    this.sprite.body.acceleration.x = 0;\n    this.sprite.body.acceleration.y = 0;\n    this.tronleft = false;\n    this.tronright = false;\n    this.tronup = false;\n    this.trondown = true;\n  }\n};\n\nmodule.exports = TronSoldier;\n","var Wizard = {\n  playerClass: 3,\n  moveMode: 0,\n  classInit: function () {\n    this.sprite.loadTexture('wizard', 0);\n  },\n  classUpdate: function classUpdate() {\n    switch (this.moveMode) {\n      case 0:\n        if (this.teleport.isDown && !this.teleportcd) {\n          this.teleportLR(this.direction);\n        }\n      break;\n    }\n  },\n  teleportLR: function teleportLR(z) {\n    if (z === 1) {\n      this.sprite.x = this.sprite.x + this.teleportRangeX;\n    } else if (z === 2){\n      this.sprite.y = this.sprite.y - Math.floor(this.teleportRangeY/1.5);\n      this.sprite.x = this.sprite.x + Math.floor(this.teleportRangeX/1.5);\n    } else if (z === 3){\n      this.sprite.y = this.sprite.y - Math.floor(this.teleportRangeY);\n    } else if (z === 4){\n      this.sprite.y = this.sprite.y - Math.floor(this.teleportRangeY/1.5);\n      this.sprite.x = this.sprite.x - Math.floor(this.teleportRangeX/1.5);\n    } else if (z === 5){\n      this.sprite.x = this.sprite.x - Math.floor(this.teleportRangeX);\n    } else if (z === 6){\n      this.sprite.y = this.sprite.y + Math.floor(this.teleportRangeY/1.5);\n      this.sprite.x = this.sprite.x - Math.floor(this.teleportRangeX/1.5);\n    } else if (z === 7){\n      this.sprite.y = this.sprite.y + Math.floor(this.teleportRangeY);\n    } else {\n      this.sprite.y = this.sprite.y + Math.floor(this.teleportRangeY/1.5);\n      this.sprite.x = this.sprite.x + Math.floor(this.teleportRangeX/1.5);\n    }\n    this.teleportcd = true;\n    this.game.time.events.add(this.teleportCd,function(){this.teleportcd = false;},this);\n  }\n};\n\nmodule.exports = Wizard;\n","\n'use strict';\n\nfunction Preloader() {\n  this.ready = false;\n}\n\nPreloader.prototype = {\n\n  preload: function () {\n    this.game.load.image(\"bg\", \"assets/bg.png\");\n    this.game.load.image('tiles-1', 'assets/tiles-1.png');\n    this.game.load.image('item', 'assets/item.png');\n    this.game.load.spritesheet('arrow', 'assets/arrow.png',29,29);\n\n    this.game.load.image('rope_ladder_top_left', 'assets/rope_ladder/ladder_1.png');\n    this.game.load.image('rope_ladder_top', 'assets/rope_ladder/ladder_2.png');\n    this.game.load.image('rope_ladder_top_right', 'assets/rope_ladder/ladder_3.png');\n    this.game.load.image('rope_ladder_middle', 'assets/rope_ladder/ladder_4.png');\n    this.game.load.image('rope_ladder_bottom', 'assets/rope_ladder/ladder_5.png');\n\n    this.game.load.image('vine_top_left', 'assets/vine/ladder_1.png');\n    this.game.load.image('vine_top_right', 'assets/vine/ladder_2.png');\n    this.game.load.image('vine_middle_left', 'assets/vine/ladder_3.png');\n    this.game.load.image('vine_middle_right', 'assets/vine/ladder_4.png');\n    this.game.load.image('vine_bottom_left', 'assets/vine/ladder_5.png');\n    this.game.load.image('vine_bottom_right', 'assets/vine/ladder_6.png');\n\n    this.game.load.spritesheet('monk_hitbox', 'assets/monk_hitbox.png', 29, 29);\n    //\n    // this.game.load.spritesheet('monk_slash_rightup', 'assets/monk_slash_rightup.png', 32, 32);\n    // this.game.load.spritesheet('monk_slash_leftup', 'assets/monk_slash_leftup.png', 32, 32);\n    // this.game.load.spritesheet('monk_slash_leftdown', 'assets/monk_slash_leftdown.png', 32, 32);\n    // this.game.load.spritesheet('monk_slash_rightdown', 'assets/monk_slash_rightdown.png', 32, 32);\n    //\n    // this.game.load.spritesheet('monk_slash_right', 'assets/monk_slash_right.png', 32, 32);\n    // this.game.load.spritesheet('monk_slash_up', 'assets/monk_slash_up.png', 32, 32);\n    // this.game.load.spritesheet('monk_slash_left', 'assets/monk_slash_left.png', 32, 32);\n    // this.game.load.spritesheet('monk_slash_down', 'assets/monk_slash_down.png', 32, 32);\n\n\n  //  this.game.load.spritesheet('player', 'assets/player.png', 58, 58);\n    this.game.load.spritesheet('explorer', 'assets/explorer.png',87, 87);\n    this.game.load.spritesheet('wizard', 'assets/wizard.png',87, 87);\n    this.game.load.spritesheet('monk', 'assets/monk.png',87, 87);\n    this.game.load.spritesheet('tron', 'assets/tron.png', 87,87);\n    this.game.load.spritesheet('demon', 'assets/demon.png', 87, 87);\n    this.game.load.spritesheet('native', 'assets/native.png', 87, 87);\n\n\n    this.game.load.spritesheet('enemy', 'assets/enemy.png', 64, 48);\n    this.game.load.spritesheet('enemy2', 'assets/enemy2.png', 80, 64);\n    //this.game.load.spritesheet('blackdude', 'assets/blackdude.png', 29, 29);\n    this.game.load.spritesheet('climbbox', 'assets/climbbox.png', 18, 18);\n    this.game.load.image('logo', 'assets/title.png');\n    this.ready = true;\n  },\n  update: function () {\n    if (!!this.ready) {\n      this.game.state.start('splash');\n    }\n  }\n};\n\nmodule.exports = Preloader;\n","\n'use strict';\n\nfunction Splash() {\n\n}\n\nSplash.prototype = {\n\n  create: function () {\n    this.stage.backgroundColor = 0xFFFFFF;\n\n    this.logo = this.add.sprite(this.world.centerX, this.world.centerY, 'logo');\n    this.logo.smoothed = true;\n    this.logo.anchor.set(0.5, 0.5);\n    //this.logo.scale.set(0.5);\n    this.logo.alpha = 0;\n\n    this.createTween();\n  },\n  createTween() {\n      var logoTween = this.add.tween(this.logo).to({alpha: 1}, 1000,\n          Phaser.Easing.Cubic.In, true, 0, 0, true);\n\n      logoTween.onComplete.add(startGame,this);\n      function startGame(){\n        this.game.state.start('game');\n      }\n  }\n};\n\nmodule.exports = Splash;\n","'use strict';\n\nfunction Survivor(id, game) {\n\tthis.id = id;\n\tthis.game = game;\n\tthis.sprite = null;\n\tthis.lastStatus = 0;\n};\n\nSurvivor.prototype = {\n\n\tcreate: function (x, y) {\n\t\tthis.sprite = this.game.survivorGroup.getFirstDead();\n\t\tthis.sprite = this.game.add.sprite(32, this.game.world.height - 150, 'explorer');\n    // adding animations\n    this.sprite.animations.add('right', [2,3,4], 10, true);\n    this.sprite.animations.add('left', [12,13,14], 10, true);\n\t\tthis.sprite.animations.add('death', [20,21,22,23,24,25,26,27], 10, false);\n\t\tthis.sprite.animations.add('monk_slash_rightup', [36,35,37,38,39,36,41,40], 16, true);\n\t\tthis.sprite.animations.add('monk_slash_leftup', [46,45,47,48,49,46,31,30], 16, true);\n\t\tthis.sprite.animations.add('monk_slash_leftdown', [40,41,40,34,33,32,30,31], 16, true);\n\t\tthis.sprite.animations.add('monk_slash_rightdown', [30,31,40,41,30,31,40,41], 16, true);\n\n\t\tthis.sprite.animations.add('monk_slash_right', [30,31,40,41,30,31,40,41], 16, true);\n\t\tthis.sprite.animations.add('monk_slash_up', [34,35,34,33,43,44,43,42], 16, true);\n\t\tthis.sprite.animations.add('monk_slash_left', [40,41,40,34,33,32,30,31], 16, true);\n\t\tthis.sprite.animations.add('monk_slash_down', [50,41,60,51,50,41,50,51], 16, true);\n\n\t\tthis.sprite.animations.add('climb_right_wall', [30,31,32,33], 12, true);\n\t\tthis.sprite.animations.add('climb_left_wall', [40,41,42,43], 12, true);\n\n\t\tthis.sprite.animations.add('climb_right_overhang', [34,35,36], 12, true);\n\t\tthis.sprite.animations.add('climb_left_overhang', [44,45,46], 12, true);\n\t\tthis.sprite.reset(x, y);\n\t\tthis.game.survivors.push(this);\n\t},\n\tupdate: function() {\n\t\tswitch (this.sprite.status) {\n\t\tcase 0: //Idle\n  \t\tif(this.lastStatus !== 0){\n  \t\t\t//this.sprite.animations.stop();\n  \t\t\tthis.sprite.frame = 4;\n  \t\t\tthis.lastStatus = 0;\n  \t\t}\n\t\tbreak;\n    case 1: //Waving\n      if(this.lastStatus !== 1){\n        //this.sprite.animations.stop();\n        this.sprite.frame = 10;\n        this.lastStatus = 1;\n      }\n    break;\n    case 2:\n      if(this.lastStatus !== 2){\n        //this.sprite.animations.stop();\n        this.sprite.animations.play('left');\n        this.lastStatus = 2;\n      }\n    break;\n    case 3:\n      if(this.lastStatus !== 3){\n        //this.sprite.animations.stop();\n        this.sprite.animations.play('right');\n        this.lastStatus = 3;\n      }\n    break;\n    case 4:\n      if(this.lastStatus !== 4){\n        //this.sprite.animations.stop();\n        this.lastStatus = 4;\n      }\n    break;\n    case 5:\n      if(this.lastStatus !== 5){\n        //this.sprite.animations.stop();\n        this.lastStatus = 5;\n      }\n    break;\n    case 6:\n      if(this.lastStatus !== 6){\n        //this.sprite.animations.stop();\n        this.sprite.animations.play('death');\n        this.lastStatus = 6;\n      }\n    break;\n    case 100:\n      if (this.lastStatus !== 100) {\n        this.sprite.loadTexture('explorer', 0);\n      }\n    break;\n    case 101:\n      if (this.lastStatus !== 101) {\n        this.sprite.loadTexture('monk', 0);\n      }\n    break;\n    case 102:\n      if (this.lastStatus !== 102) {\n        this.sprite.loadTexture('tron', 0);\n      }\n    break;\n    case 103:\n      if (this.lastStatus !== 103) {\n        this.sprite.loadTexture('wizard', 0);\n      }\n    break;\n    case 104:\n      if (this.lastStatus !== 104) {\n        this.sprite.loadTexture('native', 0);\n      }\n    break;\n    case 105:\n      if (this.lastStatus !== 105) {\n        this.sprite.loadTexture('demon', 0);\n      }\n    break;\n\t  }\n  }\n};\n\nmodule.exports = Survivor;\n"]}